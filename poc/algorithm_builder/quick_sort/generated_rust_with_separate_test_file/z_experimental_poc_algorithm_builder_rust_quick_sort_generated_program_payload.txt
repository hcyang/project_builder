Certainly! Below is an **efficient and well-documented implementation of the Quick Sort algorithm in Rust**. This program sorts a mutable vector of elements that implement the Ord trait (i.e., are orderable).

You can compile and run this code with `rustc` and `cargo`.

```rust
// quick_sort.rs
/// Quick Sort implementation in Rust
///
/// This function sorts a mutable slice in-place using the quick sort algorithm.
/// It is generic over any type that implements the `Ord` trait.

/// Partition the slice and return the pivot index.
/// All elements less than the pivot are moved to the left,
/// all elements greater are moved to the right.
fn partition<T: Ord>(arr: &mut [T]) -> usize {
    let len = arr.len();
    let pivot_index = len / 2; // Choose the middle element as pivot for better performance
    arr.swap(pivot_index, len - 1); // Move pivot to the end
    let mut store_index = 0;

    for i in 0..len - 1 {
        if arr[i] < arr[len - 1] {
            arr.swap(i, store_index);
            store_index += 1;
        }
    }
    arr.swap(store_index, len - 1); // Move pivot to its final place
    store_index
}

/// The main quick_sort function (recursive)
pub fn quick_sort<T: Ord>(arr: &mut [T]) {
    let len = arr.len();
    if len <= 1 {
        return; // Already sorted
    }
    let pivot_index = partition(arr);
    // Recursively sort elements before and after partition
    quick_sort(&mut arr[0..pivot_index]);
    quick_sort(&mut arr[pivot_index + 1..len]);
}

// Example usage and test
fn main() {
    let mut numbers = vec![10, 7, 8, 9, 1, 5];
    println!("Unsorted: {:?}", numbers);
    quick_sort(&mut numbers);
    println!("Sorted: {:?}", numbers);

    // Test with other types
    let mut strings = vec!["pear", "apple", "orange", "banana"];
    quick_sort(&mut strings);
    println!("Sorted strings: {:?}", strings);
}
```

**How to compile and run:**

1. Save the code as `quick_sort.rs`
2. Compile: `rustc quick_sort.rs`
3. Run: `./quick_sort`

**Output:**
```
Unsorted: [10, 7, 8, 9, 1, 5]
Sorted: [1, 5, 7, 8, 9, 10]
Sorted strings: ["apple", "banana", "orange", "pear"]
```

---

**Notes:**
- The algorithm is generic and can sort any type that implements `Ord`.
- The pivot is chosen as the middle element for improved performance and stability.
- The sort is done in-place for efficiency.
- The code is well-documented and idiomatic Rust.