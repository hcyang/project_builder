```rust
// poc_algorithm_builder_rust_quick_sort_generated_program_payload_tests.rs

#[cfg(test)]
mod tests {
    // Import all functions from the parent scope
    use super::*;

    #[test]
    fn test_quick_sort_empty() {
        let mut arr: [i32; 0] = [];
        quick_sort(&mut arr);
        assert_eq!(arr, []);
    }

    #[test]
    fn test_quick_sort_single_element() {
        let mut arr = [42];
        quick_sort(&mut arr);
        assert_eq!(arr, [42]);
    }

    #[test]
    fn test_quick_sort_sorted() {
        let mut arr = [1, 2, 3, 4, 5];
        quick_sort(&mut arr);
        assert_eq!(arr, [1, 2, 3, 4, 5]);
    }

    #[test]
    fn test_quick_sort_reverse() {
        let mut arr = [5, 4, 3, 2, 1];
        quick_sort(&mut arr);
        assert_eq!(arr, [1, 2, 3, 4, 5]);
    }

    #[test]
    fn test_quick_sort_duplicates() {
        let mut arr = [3, 1, 2, 3, 1];
        quick_sort(&mut arr);
        assert_eq!(arr, [1, 1, 2, 3, 3]);
    }

    #[test]
    fn test_quick_sort_strings() {
        let mut arr = ["beta", "alpha", "delta", "gamma"];
        quick_sort(&mut arr);
        assert_eq!(arr, ["alpha", "beta", "delta", "gamma"]);
    }

    #[test]
    fn test_quick_sort_large() {
        let mut arr = [9, 7, 5, 3, 1, 2, 4, 6, 8, 0];
        quick_sort(&mut arr);
        assert_eq!(arr, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);
    }

    #[test]
    fn test_quick_sort_recursive_full_range() {
        // Directly test quick_sort_recursive
        let mut arr = [4, 2, 1, 3];
        quick_sort_recursive(&mut arr, 0, arr.len() - 1);
        assert_eq!(arr, [1, 2, 3, 4]);
    }

    #[test]
    fn test_quick_sort_recursive_partial_range() {
        let mut arr = [5, 4, 3, 2, 1];
        // Only sort the middle three elements
        quick_sort_recursive(&mut arr, 1, 3);
        assert_eq!(arr, [5, 2, 3, 4, 1]);
    }

    #[test]
    fn test_partition_basic() {
        let mut arr = [4, 5, 1, 3, 2];
        // Partition the entire array
        let pivot_index = partition(&mut arr, 0, arr.len() - 1);
        // After partition, elements <= pivot are left, > pivot are right, pivot in place
        // The pivot is 2, so arr[0..pivot_index] <= 2, arr[pivot_index] == 2
        // Check pivot is in correct position
        assert_eq!(arr[pivot_index], 2);
        for i in 0..pivot_index {
            assert!(arr[i] <= arr[pivot_index]);
        }
        for i in (pivot_index + 1)..arr.len() {
            assert!(arr[i] > arr[pivot_index]);
        }
    }

    #[test]
    fn test_partition_left_equals_right() {
        let mut arr = [10];
        let pivot_index = partition(&mut arr, 0, 0);
        // Only one element, should return 0
        assert_eq!(pivot_index, 0);
        assert_eq!(arr, [10]);
    }

    #[test]
    fn test_partition_all_equal() {
        let mut arr = [7, 7, 7, 7];
        let pivot_index = partition(&mut arr, 0, arr.len() - 1);
        assert_eq!(arr[pivot_index], 7);
        for i in 0..arr.len() {
            assert_eq!(arr[i], 7);
        }
    }
}

// Bring functions into test module for direct testing
pub fn quick_sort<T: Ord>(arr: &mut [T]) {
    if arr.len() <= 1 {
        return;
    }
    quick_sort_recursive(arr, 0, arr.len() - 1);
}

fn quick_sort_recursive<T: Ord>(arr: &mut [T], left: usize, right: usize) {
    if left < right {
        let pivot_index = partition(arr, left, right);
        if pivot_index > 0 {
            quick_sort_recursive(arr, left, pivot_index - 1);
        }
        quick_sort_recursive(arr, pivot_index + 1, right);
    }
}

fn partition<T: Ord>(arr: &mut [T], left: usize, right: usize) -> usize {
    let pivot = right;
    let mut i = left;
    for j in left..right {
        if arr[j] <= arr[pivot] {
            arr.swap(i, j);
            i += 1;
        }
    }
    arr.swap(i, pivot);
    i
}
```

**Comments:**
- The above file is named `poc_algorithm_builder_rust_quick_sort_generated_program_payload_tests.rs`.
- It covers all three functions: `quick_sort`, `quick_sort_recursive`, and `partition`.
- All necessary imports are included. The functions are redefined at the bottom for compilability if used standalone, but in your project you should import from the actual implementation.
- Each test is thorough and checks correctness for various cases.
- You can copy and paste this file directly to test your program.